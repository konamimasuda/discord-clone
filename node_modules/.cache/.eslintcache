[{"/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/index.tsx":"1","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/App.tsx":"2","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/sidebar/Sidebar.tsx":"3","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/sidebar/SidebarChannel.tsx":"4","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/chat/Chat.tsx":"5","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/chat/ChatHeader.tsx":"6","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/chat/ChatMessage.tsx":"7","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/app/store.ts":"8","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/features/userSlice.ts":"9","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/Login/Login.tsx":"10","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/login/Login.tsx":"11","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/app/hooks.ts":"12","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/firebase.ts":"13","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/utils/ErrorFallBack.tsx":"14","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/hooks/useCollection.tsx":"15","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/features/channelSlice.ts":"16","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/hooks/useSubCollection.tsx":"17"},{"size":398,"mtime":1678539948863,"results":"18","hashOfConfig":"19"},{"size":1311,"mtime":1678617630094,"results":"20","hashOfConfig":"19"},{"size":3101,"mtime":1678671749042,"results":"21","hashOfConfig":"19"},{"size":799,"mtime":1678616970531,"results":"22","hashOfConfig":"19"},{"size":2852,"mtime":1678670511408,"results":"23","hashOfConfig":"19"},{"size":1074,"mtime":1678618080621,"results":"24","hashOfConfig":"19"},{"size":772,"mtime":1678622834981,"results":"25","hashOfConfig":"19"},{"size":390,"mtime":1678617575174,"results":"26","hashOfConfig":"19"},{"size":513,"mtime":1678586516320,"results":"27","hashOfConfig":"19"},{"size":581,"mtime":1678586726960,"results":"28","hashOfConfig":"19"},{"size":581,"mtime":1678586726960,"results":"29","hashOfConfig":"19"},{"size":296,"mtime":1678582759146,"results":"30","hashOfConfig":"19"},{"size":779,"mtime":1678602278936,"results":"31","hashOfConfig":"19"},{"size":373,"mtime":1678600774916,"results":"32","hashOfConfig":"19"},{"size":822,"mtime":1678613371578,"results":"33","hashOfConfig":"19"},{"size":592,"mtime":1678616681135,"results":"34","hashOfConfig":"19"},{"size":1308,"mtime":1678625277692,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"1uzvbb3",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"39"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"39"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"39"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"39"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"39"},"/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/index.tsx",[],[],[],"/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/App.tsx",["96"],[],"import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./App.scss\";\nimport { useAppSelector, useAppDispatch } from \"./app/hooks\";\nimport Chat from \"./components/chat/Chat\";\nimport Sidebar from \"./components/sidebar/Sidebar\";\nimport Login from \"./components/login/Login\";\nimport { auth } from \"./firebase\";\nimport { login, logout } from \"./features/userSlice\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { ErrorFallBack } from \"./utils/ErrorFallBack\";\n\nfunction App() {\n  const user = useAppSelector((state) => state.user.user);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    auth.onAuthStateChanged((loginUser) => {\n      if (loginUser) {\n        dispatch(\n          login({\n            uid: loginUser.uid,\n            photo: loginUser.photoURL,\n            email: loginUser.email,\n            displayName: loginUser.displayName,\n          })\n        );\n      } else {\n        dispatch(logout());\n      }\n    });\n  }, [dispatch]);\n  return (\n    <div className=\"App\">\n      {user ? (\n        <>\n          <ErrorBoundary FallbackComponent={ErrorFallBack}>\n            <Sidebar />\n          </ErrorBoundary>\n\n          <Chat />\n        </>\n      ) : (\n        <>\n          <Login />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/sidebar/Sidebar.tsx",["97","98"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./Sidebar.scss\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport SidebarChannel from \"./SidebarChannel\";\nimport MicIcon from \"@mui/icons-material/Mic\";\nimport HeadphonesIcon from \"@mui/icons-material/Headphones\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { auth, db } from \"../../firebase\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport useCollection from \"../../hooks/useCollection\";\nimport { collection, addDoc } from \"firebase/firestore\";\n\nconst Sidebar = () => {\n  const user = useAppSelector((state) => state.user.user);\n  const { documents: channels } = useCollection(\"channels\");\n\n  const addChannel = async () => {\n    let channelName = prompt(\"新しいチャンネルを作成します\");\n\n    if (channelName) {\n      await addDoc(collection(db, \"channels\"), {\n        channelName: channelName,\n      });\n    }\n  };\n  return (\n    <div className=\"sidebar\">\n      {/* sidebarLeft */}\n      <div className=\"sidebar__left\">\n        <div className=\"serverIcon\">\n          <span className=\"serverIcon__span\">\n            <img\n              className=\"serverIcon__img\"\n              src=\"./discordIcon.png\"\n              alt=\"React\"\n            />\n          </span>\n        </div>\n        <div className=\"serverIcon\">\n          <span className=\"serverIcon__span\">\n            <img\n              className=\"serverIcon__img\"\n              src=\"./discordIcon.png\"\n              alt=\"React\"\n            />\n          </span>\n        </div>\n      </div>\n      {/* sidebarRight */}\n      <div className=\"sidebar__right\">\n        <div className=\"sidebar__top\">\n          <h3>Discord</h3>\n          <ExpandMoreIcon />\n        </div>\n\n        <div className=\"sidebar__channels\">\n          <div className=\"channels\">\n            <div className=\"channels__header\">\n              <ExpandMoreIcon />\n              <h4>メインチャット</h4>\n            </div>\n            <AddIcon\n              className=\"channels__addicon\"\n              onClick={() => addChannel()}\n            />\n          </div>\n\n          <div className=\"list\">\n            {channels.map((channel) => (\n              <SidebarChannel\n                channel={channel}\n                id={channel.id}\n                key={channel.id}\n              />\n            ))}\n          </div>\n\n          <div className=\"footer\">\n            <div className=\"footer__account\">\n              <img\n                src={user?.photo}\n                alt=\"\"\n                className=\"footer__img\"\n                onClick={() => auth.signOut()}\n              />\n              <div className=\"accountName\">\n                <h4>{user?.displayName}</h4>\n                <span>#{user?.uid.substring(0, 4)}</span>\n              </div>\n            </div>\n\n            <div className=\"footer__voice\">\n              <MicIcon />\n              <HeadphonesIcon />\n              <SettingsIcon />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/sidebar/SidebarChannel.tsx",[],[],"/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/chat/Chat.tsx",["99","100","101","102","103","104"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./Chat.scss\";\nimport ChatHeader from \"./ChatHeader\";\nimport ChatMessage from \"./ChatMessage\";\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\nimport CardGiftcardIcon from \"@mui/icons-material/CardGiftcard\";\nimport GifIcon from \"@mui/icons-material/Gif\";\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport {\n  collection,\n  CollectionReference,\n  DocumentReference,\n  DocumentData,\n  addDoc,\n  serverTimestamp,\n  onSnapshot,\n  Timestamp,\n  query,\n  orderBy,\n} from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nimport useSubCollection from \"../../hooks/useSubCollection\";\n\nconst Chat = () => {\n  const [inputText, setInputText] = useState<string>(\"\");\n  const channelId = useAppSelector((state) => state.channel.channelId);\n  const channelName = useAppSelector((state) => state.channel.channelName);\n  const user = useAppSelector((state) => state.user.user);\n  const { subDocuments: messages } = useSubCollection(\"channels\", \"messages\");\n\n  const sendMessage = async (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    e.preventDefault();\n\n    const collectionRef: CollectionReference<DocumentData> = collection(\n      db,\n      \"channels\",\n      String(channelId),\n      \"messages\"\n    );\n\n    const docRef: DocumentReference<DocumentData> = await addDoc(\n      collectionRef,\n      {\n        message: inputText,\n        timestamp: serverTimestamp(),\n        user: user,\n      }\n    );\n    setInputText(\"\");\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"chat__header\">\n        <ChatHeader channelName={channelName} />\n      </div>\n      <div className=\"chat__message\">\n        {messages.map((message, index) => (\n          <ChatMessage\n            key={index}\n            message={message.message}\n            timestamp={message.timestamp}\n            user={message.user}\n          />\n        ))}\n      </div>\n      <div className=\"chat__input\">\n        <AddCircleOutlineIcon />\n        <form className=\"chat__form\">\n          <input\n            type=\"text\"\n            placeholder=\"メッセージを送信する\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setInputText(e.target.value)\n            }\n            value={inputText}\n          />\n          <button\n            type=\"submit\"\n            className=\"chat__inputbtn\"\n            onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) =>\n              sendMessage(e)\n            }\n          >\n            送信\n          </button>\n        </form>\n        <div className=\"chat__icons\">\n          <CardGiftcardIcon />\n          <GifIcon />\n          <EmojiEmotionsIcon />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/chat/ChatHeader.tsx",[],[],"/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/chat/ChatMessage.tsx",[],[],"/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/app/store.ts",[],[],"/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/features/userSlice.ts",[],[],"/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/Login/Login.tsx",[],[],"/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/components/login/Login.tsx",[],[],"/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/app/hooks.ts",[],[],"/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/firebase.ts",["105"],[],"import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getFirestore } from \"firebase/firestore\"; \nimport { getAuth, GoogleAuthProvider } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCT3EBlbfhTZ5C60s51HH3HjZzrjq6F3CY\",\n  authDomain: \"discord-clone-udemy-5b840.firebaseapp.com\",\n  projectId: \"discord-clone-udemy-5b840\",\n  storageBucket: \"discord-clone-udemy-5b840.appspot.com\",\n  messagingSenderId: \"889293111722\",\n  appId: \"1:889293111722:web:4a241649ec42708ad16bd3\",\n  measurementId: \"G-CBSSM2EC38\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst db = getFirestore();\nconst auth = getAuth();\nconst provider = new GoogleAuthProvider();\n\nexport { auth, provider, db};","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/utils/ErrorFallBack.tsx",["106"],[],"import { ErrorBoundary } from \"react-error-boundary\";\nimport { FallbackProps } from \"react-error-boundary\";\n\nexport const ErrorFallBack = ({ error, resetErrorBoundary }: FallbackProps) => {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong:</p>\n      <pre>{error.message}</pre>\n      <button onClick={resetErrorBoundary}>Try again</button>\n    </div>\n  );\n};\n","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/hooks/useCollection.tsx",["107","108"],[],"import React, { useState, useEffect } from \"react\";\nimport {\n  onSnapshot,\n  collection,\n  query,\n  DocumentData,\n  Query,\n} from \"firebase/firestore\";\nimport { db } from \"../firebase\";\n\ninterface Channels {\n  id: string;\n  channel: DocumentData;\n}\n\nconst useCollection = (data: string) => {\n  const [documents, setDocuments] = useState<Channels[]>([]);\n  const collectionRef: Query<DocumentData> = query(collection(db, data));\n\n  useEffect(() => {\n    onSnapshot(collectionRef, (querySnapshot: { docs: any[] }) => {\n      const channelsResults: Channels[] = [];\n      querySnapshot.docs.forEach((doc) =>\n        channelsResults.push({\n          id: doc.id,\n          channel: doc.data(),\n        })\n      );\n      setDocuments(channelsResults);\n    });\n  }, []);\n  return { documents };\n};\n\nexport default useCollection;\n","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/features/channelSlice.ts",["109"],[],"import { createSlice } from \"@reduxjs/toolkit\";\nimport { InitialUserState, InitialChannelState } from \"../Types\";\n\nconst initialState: InitialChannelState = {\n    channelId: null,\n    channelName: null,\n}\n\nexport const channelSlice = createSlice({\n    name: \"channel\",\n    initialState: initialState,\n    reducers: {\n        setChannelInfo: (state, action) => {\n            state.channelId = action.payload.channelId;\n            state.channelName = action.payload.channelName;\n        },\n    },\n});\n\nexport const  {setChannelInfo} = channelSlice.actions;\nexport default channelSlice.reducer;","/Users/konami/Desktop/dev/udemy/discord-clone-udemy/src/hooks/useSubCollection.tsx",["110","111","112","113"],[],"import React, { useState, useEffect } from \"react\";\nimport {\n  onSnapshot,\n  collection,\n  query,\n  DocumentData,\n  Query,\n  orderBy,\n  Timestamp,\n} from \"firebase/firestore\";\nimport { db } from \"../firebase\";\nimport { useAppSelector } from \"../app/hooks\";\n\ninterface Messages {\n  timestamp: Timestamp;\n  message: string;\n  user: {\n    uid: string;\n    photo: string;\n    email: string;\n    displayName: string;\n  };\n}\n\nconst useSubCollection = (\n  collectionName: string,\n  subCollectionName: string\n) => {\n  const channelId = useAppSelector((state) => state.channel.channelId);\n  const [subDocuments, setSubDocuments] = useState<Messages[]>([]);\n  useEffect(() => {\n    let collectionRef = collection(\n      db,\n      collectionName,\n      String(channelId),\n      subCollectionName\n    );\n\n    const collectionRefOrderBy = query(\n      collectionRef,\n      orderBy(\"timestamp\", \"desc\")\n    );\n\n    onSnapshot(collectionRefOrderBy, (snapshot) => {\n      let results: Messages[] = [];\n      snapshot.docs.forEach((doc) => {\n        results.push({\n          timestamp: doc.data().timestamp,\n          message: doc.data().message,\n          user: doc.data().user,\n        });\n      });\n      setSubDocuments(results);\n    });\n  }, [channelId]);\n  return { subDocuments };\n};\n\nexport default useSubCollection;\n",{"ruleId":"114","severity":1,"message":"115","line":2,"column":10,"nodeType":"116","messageId":"117","endLine":2,"endColumn":21},{"ruleId":"114","severity":1,"message":"118","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"119","line":1,"column":28,"nodeType":"116","messageId":"117","endLine":1,"endColumn":36},{"ruleId":"114","severity":1,"message":"118","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"120","line":17,"column":3,"nodeType":"116","messageId":"117","endLine":17,"endColumn":13},{"ruleId":"114","severity":1,"message":"121","line":18,"column":3,"nodeType":"116","messageId":"117","endLine":18,"endColumn":12},{"ruleId":"114","severity":1,"message":"122","line":19,"column":3,"nodeType":"116","messageId":"117","endLine":19,"endColumn":8},{"ruleId":"114","severity":1,"message":"123","line":20,"column":3,"nodeType":"116","messageId":"117","endLine":20,"endColumn":10},{"ruleId":"114","severity":1,"message":"124","line":44,"column":11,"nodeType":"116","messageId":"117","endLine":44,"endColumn":50},{"ruleId":"114","severity":1,"message":"125","line":17,"column":7,"nodeType":"116","messageId":"117","endLine":17,"endColumn":16},{"ruleId":"114","severity":1,"message":"126","line":1,"column":10,"nodeType":"116","messageId":"117","endLine":1,"endColumn":23},{"ruleId":"114","severity":1,"message":"127","line":1,"column":8,"nodeType":"116","messageId":"117","endLine":1,"endColumn":13},{"ruleId":"128","severity":1,"message":"129","line":31,"column":6,"nodeType":"130","endLine":31,"endColumn":8,"suggestions":"131"},{"ruleId":"114","severity":1,"message":"132","line":2,"column":10,"nodeType":"116","messageId":"117","endLine":2,"endColumn":26},{"ruleId":"114","severity":1,"message":"127","line":1,"column":8,"nodeType":"116","messageId":"117","endLine":1,"endColumn":13},{"ruleId":"114","severity":1,"message":"133","line":6,"column":3,"nodeType":"116","messageId":"117","endLine":6,"endColumn":15},{"ruleId":"114","severity":1,"message":"134","line":7,"column":3,"nodeType":"116","messageId":"117","endLine":7,"endColumn":8},{"ruleId":"128","severity":1,"message":"135","line":55,"column":6,"nodeType":"130","endLine":55,"endColumn":17,"suggestions":"136"},"@typescript-eslint/no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'onSnapshot' is defined but never used.","'Timestamp' is defined but never used.","'query' is defined but never used.","'orderBy' is defined but never used.","'docRef' is assigned a value but never used.","'analytics' is assigned a value but never used.","'ErrorBoundary' is defined but never used.","'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'collectionRef'. Either include it or remove the dependency array.","ArrayExpression",["137"],"'InitialUserState' is defined but never used.","'DocumentData' is defined but never used.","'Query' is defined but never used.","React Hook useEffect has missing dependencies: 'collectionName' and 'subCollectionName'. Either include them or remove the dependency array.",["138"],{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [collectionRef]",{"range":"143","text":"144"},"Update the dependencies array to be: [channelId, collectionName, subCollectionName]",{"range":"145","text":"146"},[759,761],"[collectionRef]",[1230,1241],"[channelId, collectionName, subCollectionName]"]